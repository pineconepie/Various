# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Generate dynamic navigation
        run: |
          # Create a python script to build the navigation
          cat > build_nav.py <<'EOF'
          import os
          
          # 1. Find all HTML files in the root directory
          files = [f for f in os.listdir('.') if f.endswith('.html')]
          files.sort()
          
          # 2. Generate the navigation links as a list of HTML strings
          nav_links = []
          for filename in files:
              # Create a clean name for the link text
              name = os.path.splitext(filename)[0].replace('_', ' ').replace('-', ' ').capitalize()
              if filename == 'index.html':
                  name = 'Home'
              
              # Build the HTML link tag
              link = f'<a href="/{filename}" class="text-white font-medium hover:text-blue-300">{name}</a>'
              nav_links.append(link)
          
          # 3. Join the links and identify the placeholder to be replaced
          nav_html = ' '.join(nav_links)
          placeholder = ''
          
          # 4. Read each HTML file, replace the placeholder, and write it back
          print(f"Found HTML files: {files}")
          for filename in files:
              try:
                  with open(filename, 'r', encoding='utf-8') as f:
                      content = f.read()
                  
                  if placeholder in content:
                      content = content.replace(placeholder, nav_html)
                      with open(filename, 'w', encoding='utf-8') as f:
                          f.write(content)
                      print(f"Successfully updated navigation in {filename}")
                  else:
                      print(f"Warning: Placeholder not found in {filename}")

              except Exception as e:
                  print(f"Error processing {filename}: {e}")

          EOF
          
          # Run the python script
          python build_nav.py
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
